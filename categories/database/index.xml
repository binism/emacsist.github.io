<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>database on emacsist</title>
    <link>https://emacsist.github.io/categories/database/</link>
    <description>Recent content in database on emacsist</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 17 Oct 2016 11:51:00 +0000</lastBuildDate>
    
	<atom:link href="https://emacsist.github.io/categories/database/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>MySQL中按条件count</title>
      <link>https://emacsist.github.io/2016/10/17/mysql%E4%B8%AD%E6%8C%89%E6%9D%A1%E4%BB%B6count/</link>
      <pubDate>Mon, 17 Oct 2016 11:51:00 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/10/17/mysql%E4%B8%AD%E6%8C%89%E6%9D%A1%E4%BB%B6count/</guid>
      <description>问题 产品中有个业务是定时发通知的，现有的逻辑是，只有通知数&amp;gt;0时，才会发通知，现在PM说要修改为无论有没有消息数，都要在定时的时间发送</description>
    </item>
    
    <item>
      <title>MySQL获取分组后的TopN条数据</title>
      <link>https://emacsist.github.io/2016/10/13/mysql%E8%8E%B7%E5%8F%96%E5%88%86%E7%BB%84%E5%90%8E%E7%9A%84topn%E6%9D%A1%E6%95%B0%E6%8D%AE/</link>
      <pubDate>Thu, 13 Oct 2016 15:30:21 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/10/13/mysql%E8%8E%B7%E5%8F%96%E5%88%86%E7%BB%84%E5%90%8E%E7%9A%84topn%E6%9D%A1%E6%95%B0%E6%8D%AE/</guid>
      <description>表结构 mysql&amp;gt; desc dce_his_cs_m_jyhqsj; +---------+---------------+------+-----+---------+----------------+ | Field | Type | Null | Key | Default | Extra | +---------+---------------+------+-----+---------+----------------+ | QSJDATE | varchar(20) | YES | | NULL | | | QSJDDDD | varchar(8) | NO | PRI | NULL | | | QSJMMMM | varchar(4) | NO | PRI | NULL | | | QSJHYBH | varchar(10) | NO | PRI | NULL | | | QSJKHBH</description>
    </item>
    
    <item>
      <title>PostgreSQL导入微博数据</title>
      <link>https://emacsist.github.io/2016/09/30/postgresql%E5%AF%BC%E5%85%A5%E5%BE%AE%E5%8D%9A%E6%95%B0%E6%8D%AE/</link>
      <pubDate>Fri, 30 Sep 2016 16:04:40 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/09/30/postgresql%E5%AF%BC%E5%85%A5%E5%BE%AE%E5%8D%9A%E6%95%B0%E6%8D%AE/</guid>
      <description>微博日志的数据 使用的PG版本为9.6.0 文件的每一行的内容格式如下: {&amp;quot;q&amp;quot;:&amp;quot;keyword&amp;quot;, &amp;quot;result&amp;quot;:&amp;quot;statuses:[{ &amp;quot;id&amp;quot;:xxxx, &amp;quot;created_at&amp;quot;:&amp;quot;Thu Jul 16 12:55:27 +0800 2015&amp;quot; }]&amp;quot;} 关于导入JSON数据，可以参考上一徬 Postgres</description>
    </item>
    
    <item>
      <title>PostgreSQL导入JSON</title>
      <link>https://emacsist.github.io/2016/09/29/postgresql%E5%AF%BC%E5%85%A5json/</link>
      <pubDate>Thu, 29 Sep 2016 15:33:10 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/09/29/postgresql%E5%AF%BC%E5%85%A5json/</guid>
      <description>过滤Unicode字符 sed -i &#39;s/\u0000//g&#39; json.txt 使用pgfutter Github pgfutter pgfutter --jsonb json 你的json文件 创建唯一索引 CREATE UNIQUE INDEX status_id_uniq ON status ( (data-&amp;gt;&amp;gt;&#39;id&#39;) ); 注意，-&amp;gt;返回的是jsonb</description>
    </item>
    
    <item>
      <title>MySQL中的analyze与optimize</title>
      <link>https://emacsist.github.io/2016/09/26/mysql%E4%B8%AD%E7%9A%84analyze%E4%B8%8Eoptimize/</link>
      <pubDate>Mon, 26 Sep 2016 15:31:08 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/09/26/mysql%E4%B8%AD%E7%9A%84analyze%E4%B8%8Eoptimize/</guid>
      <description>analyze 作用： &amp;gt; 分析表主要作用是分析并保存索引的分布. analyze-table MySQL document 语法: ANALYZE [NO_WRITE_TO_BINLOG | LOCAL] TABLE tbl_name [, tbl_name] ... 使用ANALYZE TABLE分析表的过程中，数据库系统会对表加</description>
    </item>
    
    <item>
      <title>PostgreSQL PITR实践</title>
      <link>https://emacsist.github.io/2016/09/19/postgresql-pitr%E5%AE%9E%E8%B7%B5/</link>
      <pubDate>Mon, 19 Sep 2016 15:21:57 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/09/19/postgresql-pitr%E5%AE%9E%E8%B7%B5/</guid>
      <description>初始化示例数据库 ┌─[sky@sky-linux] - [/ihome/db/postgresql] - [2016-09-19 03:22:35] └─[0] &amp;lt;&amp;gt; mkdir pitr-data ┌─[sky@sky-linux] - [/ihome/db/postgresql] - [2016-09-19 03:22:47] └─[0] &amp;lt;&amp;gt; initdb -D pitr-data The</description>
    </item>
    
    <item>
      <title>生产环境一次Redis导致OOM Killer的问题</title>
      <link>https://emacsist.github.io/2016/09/06/%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E4%B8%80%E6%AC%A1redis%E5%AF%BC%E8%87%B4oom-killer%E7%9A%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 06 Sep 2016 14:18:36 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/09/06/%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E4%B8%80%E6%AC%A1redis%E5%AF%BC%E8%87%B4oom-killer%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
      <description>Redis 引发系统OOM Killer 昨晚（2016-9-5），生产环境的Redis发生警报，一段时间后，内存被降到50%多（之前一直在90%左右），然后发现R</description>
    </item>
    
    <item>
      <title>PostgreSQL SQL收集</title>
      <link>https://emacsist.github.io/2016/08/30/postgresql-sql%E6%94%B6%E9%9B%86/</link>
      <pubDate>Tue, 30 Aug 2016 11:14:08 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/08/30/postgresql-sql%E6%94%B6%E9%9B%86/</guid>
      <description>查看是否存在无效索引 SELECT * FROM pg_class, pg_index WHERE pg_index.indisvalid = false AND pg_index.indexrelid = pg_class.oid; 查看大小 查看表大小: \d+ 查看数据库大小: \l+ 查看表，索引及总大小 SELECT table_name, pg_size_pretty(table_size) AS table_size, pg_size_pretty(indexes_size) AS indexes_size, pg_size_pretty(total_size) AS total_size FROM ( SELECT table_name, pg_table_size(table_name) AS</description>
    </item>
    
    <item>
      <title>MySQL VS PostgreSQL 的alter table</title>
      <link>https://emacsist.github.io/2016/08/22/mysql-vs-postgresql-%E7%9A%84alter-table/</link>
      <pubDate>Mon, 22 Aug 2016 17:35:39 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/08/22/mysql-vs-postgresql-%E7%9A%84alter-table/</guid>
      <description>版本 PostgreSQL [local]:5432 sky@sky=# select version(); version ----------------------------------------------------------------------------------------------------------- PostgreSQL 9.6beta4 on x86_64-pc-linux-gnu, compiled by gcc (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4, 64-bit (1 row) Time: 0.407 ms [local]:5432 sky@sky=# MySQL mysql&amp;gt; select version(); +-------------------------------------+ | version() | +-------------------------------------+ | 5.7.12-1~exp1+deb.sury.org~trusty+1 | +-------------------------------------+ 1 row in set (0.00 sec) mysql&amp;gt; 测试表 PostgreSQL: [local]:5432 sky@sky=# \d wb_status; Table &amp;quot;public.wb_status&amp;quot; Column | Type | Modifiers ------------------------+-----------------------------+-------------------------------------------------------- id | integer | not null default</description>
    </item>
    
    <item>
      <title>PostgreSQL添加字段以及vacuum full对表的影响</title>
      <link>https://emacsist.github.io/2016/08/22/postgresql%E6%B7%BB%E5%8A%A0%E5%AD%97%E6%AE%B5%E4%BB%A5%E5%8F%8Avacuum-full%E5%AF%B9%E8%A1%A8%E7%9A%84%E5%BD%B1%E5%93%8D/</link>
      <pubDate>Mon, 22 Aug 2016 17:05:23 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/08/22/postgresql%E6%B7%BB%E5%8A%A0%E5%AD%97%E6%AE%B5%E4%BB%A5%E5%8F%8Avacuum-full%E5%AF%B9%E8%A1%A8%E7%9A%84%E5%BD%B1%E5%93%8D/</guid>
      <description>PostgreSQL添加字段对表的影响 [local]:5432 sky@sky=# select pg_relation_filepath(&#39;testcount&#39;); pg_relation_filepath ---------------------- base/16384/18081 (1 row) Time: 0.163 ms [local]:5432 sky@sky=# ALTER TABLE testcount ADD col [local]:5432 sky@sky=# ALTER TABLE testcount ADD column bb_id int; ALTER TABLE Time: 0.917 ms [local]:5432 sky@sky=# select pg_relation_filepath(&#39;testcount&#39;); pg_relation_filepath ---------------------- base/16384/18081 (1 row) Time: 0.209 ms [local]:5432 sky@sky=# ALTER TABLE testcount ADD</description>
    </item>
    
    <item>
      <title> PostgreSQL获取部分结果集中再获取最大值最小值的结果集</title>
      <link>https://emacsist.github.io/2016/08/19/postgresql%E8%8E%B7%E5%8F%96%E9%83%A8%E5%88%86%E7%BB%93%E6%9E%9C%E9%9B%86%E4%B8%AD%E5%86%8D%E8%8E%B7%E5%8F%96%E6%9C%80%E5%A4%A7%E5%80%BC%E6%9C%80%E5%B0%8F%E5%80%BC%E7%9A%84%E7%BB%93%E6%9E%9C%E9%9B%86/</link>
      <pubDate>Fri, 19 Aug 2016 14:37:14 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/08/19/postgresql%E8%8E%B7%E5%8F%96%E9%83%A8%E5%88%86%E7%BB%93%E6%9E%9C%E9%9B%86%E4%B8%AD%E5%86%8D%E8%8E%B7%E5%8F%96%E6%9C%80%E5%A4%A7%E5%80%BC%E6%9C%80%E5%B0%8F%E5%80%BC%E7%9A%84%E7%BB%93%E6%9E%9C%E9%9B%86/</guid>
      <description>PostgreSQL获取部分结果集中再获取最大值最小值的结果集 假设表结构如下。想要获取create_at在某时间范围的内的，最大的以及最小的</description>
    </item>
    
    <item>
      <title> PostgreSQL9.6并行查询</title>
      <link>https://emacsist.github.io/2016/08/18/postgresql9.6%E5%B9%B6%E8%A1%8C%E6%9F%A5%E8%AF%A2/</link>
      <pubDate>Thu, 18 Aug 2016 15:08:46 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/08/18/postgresql9.6%E5%B9%B6%E8%A1%8C%E6%9F%A5%E8%AF%A2/</guid>
      <description>并行查询 这个是PostgreSQL 9.6才开始有的。 测试环境是4核心的i5CPU，其他配置为PostgreSQL默认. 测试数据 [local]:5432 sky@sky=# CREATE TABLE testcount(id int); CREATE</description>
    </item>
    
    <item>
      <title>PostgreSQL服务器参数配置</title>
      <link>https://emacsist.github.io/2016/08/12/postgresql%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Fri, 12 Aug 2016 17:24:01 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/08/12/postgresql%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%8F%82%E6%95%B0%E9%85%8D%E7%BD%AE/</guid>
      <description>内存相关 shared_buffers 这个参数决定了有多少内存将用于PostgreSQL的数据缓存.当多个会话从同一张表中请求相同数据时，shared_buffers保</description>
    </item>
    
    <item>
      <title>PostgreSQL中文全文搜索</title>
      <link>https://emacsist.github.io/2016/08/11/postgresql%E4%B8%AD%E6%96%87%E5%85%A8%E6%96%87%E6%90%9C%E7%B4%A2/</link>
      <pubDate>Thu, 11 Aug 2016 16:39:14 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/08/11/postgresql%E4%B8%AD%E6%96%87%E5%85%A8%E6%96%87%E6%90%9C%E7%B4%A2/</guid>
      <description>安装 zhparser zhparser 使用 创建测试表: create table ts (name varchar(1024)); sky=# select * from ts limit 50; name ------------------------------ 中国人民 中国人民解放军 中国人民解放军，军队 中国军人 中国军队 中国军队1 中国军队一二三 中国军</description>
    </item>
    
    <item>
      <title>PostgreSQL搭建复制启动报 invalid record length at</title>
      <link>https://emacsist.github.io/2016/08/11/postgresql%E6%90%AD%E5%BB%BA%E5%A4%8D%E5%88%B6%E5%90%AF%E5%8A%A8%E6%8A%A5-invalid-record-length-at/</link>
      <pubDate>Thu, 11 Aug 2016 14:05:48 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/08/11/postgresql%E6%90%AD%E5%BB%BA%E5%A4%8D%E5%88%B6%E5%90%AF%E5%8A%A8%E6%8A%A5-invalid-record-length-at/</guid>
      <description>信息 ╭─sky@sky-linux /ihome/db/postgresql ╰─➤ ./current/bin/pg_ctl -D slave-data start 1 ↵ server starting ╭─sky@sky-linux /ihome/db/postgresql ╰─➤ LOG: database system was shut down in recovery at 2016-08-11 10:57:31 CST LOG: entering standby mode LOG: consistent recovery state reached at</description>
    </item>
    
    <item>
      <title>PostgreSQL查看复制状态</title>
      <link>https://emacsist.github.io/2016/08/11/postgresql%E6%9F%A5%E7%9C%8B%E5%A4%8D%E5%88%B6%E7%8A%B6%E6%80%81/</link>
      <pubDate>Thu, 11 Aug 2016 11:26:46 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/08/11/postgresql%E6%9F%A5%E7%9C%8B%E5%A4%8D%E5%88%B6%E7%8A%B6%E6%80%81/</guid>
      <description>查看复制状态 在master上执行 sky=# select * from pg_stat_replication; -[ RECORD 1 ]----+------------------------------ pid | 13321 usesysid | 17019 usename | replication application_name | walreceiver client_addr | 10.0.0.81 client_hostname | client_port | 42809 backend_start | 2016-08-11 10:57:35.856289+08 backend_xmin | state | streaming sent_location | 1/E0CE9750 write_location | 1/E0CE9750 flush_location | 1/E0CE9750 replay_location | 1/E0CE9750 sync_priority | 0 sync_state</description>
    </item>
    
    <item>
      <title>批量操作中数据库死锁的解决方法</title>
      <link>https://emacsist.github.io/2016/08/08/%E6%89%B9%E9%87%8F%E6%93%8D%E4%BD%9C%E4%B8%AD%E6%95%B0%E6%8D%AE%E5%BA%93%E6%AD%BB%E9%94%81%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</link>
      <pubDate>Mon, 08 Aug 2016 15:56:02 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/08/08/%E6%89%B9%E9%87%8F%E6%93%8D%E4%BD%9C%E4%B8%AD%E6%95%B0%E6%8D%AE%E5%BA%93%E6%AD%BB%E9%94%81%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</guid>
      <description>原因 在生产环境中, 发现数据库经常报死锁.排查问题后,发现是由于RabbitMQ监听器, 批量处理SQL: insert ... on duplicate key update ... 这类SQL引起. 解决 在添</description>
    </item>
    
    <item>
      <title>PostgreSQL中创建自定义类型及其运算符</title>
      <link>https://emacsist.github.io/2016/01/18/postgresql%E4%B8%AD%E5%88%9B%E5%BB%BA%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B%E5%8F%8A%E5%85%B6%E8%BF%90%E7%AE%97%E7%AC%A6/</link>
      <pubDate>Mon, 18 Jan 2016 11:47:21 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/01/18/postgresql%E4%B8%AD%E5%88%9B%E5%BB%BA%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B%E5%8F%8A%E5%85%B6%E8%BF%90%E7%AE%97%E7%AC%A6/</guid>
      <description>创建一个person的数据类型 sky=# create type person as (name varchar(10), age int); CREATE TYPE sky=# 使用person这个数据类型 sky=# create table use_person (id serial, o person); CREATE TABLE sky=# 插入示例数据 sky=# insert into use_person (o) values (row(&#39;yzy&#39;, 18)); INSERT 0 1 sky=#</description>
    </item>
    
    <item>
      <title>源码安装PostgreSQL 9.5</title>
      <link>https://emacsist.github.io/2016/01/12/%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85postgresql-9.5/</link>
      <pubDate>Tue, 12 Jan 2016 16:27:07 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/01/12/%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85postgresql-9.5/</guid>
      <description>下载源码 # 安装目录 mkdir -p /ihome/db/postgresql/postgresql-9.5.0 # 存放解压源码的目录 mkdir -p /ihome/db/postgresql/build cd /ihome/db/postgresql wget -c https://ftp.postgresql.org/pub/source/v9.5.0/postgresql-9.5.0.tar.bz2 tar -xvf /ihome/db/postgresql/postgresql-9.5.0.tar.bz2 -C /ihome/db/postgresql/build cd /ihome/db/postgresql/build/postgresql-9.5.0 安装依赖 sudo apt-get install libreadline-dev 编译 ./configure --prefix=/ihome/db/postgresql/postgresql-9.5.0 make -j 8 成功后，会提示如下: All of PostgreSQL successfully made. Ready to install.</description>
    </item>
    
    <item>
      <title>[转]SQL 中各种join</title>
      <link>https://emacsist.github.io/2016/01/07/%E8%BD%ACsql-%E4%B8%AD%E5%90%84%E7%A7%8Djoin/</link>
      <pubDate>Thu, 07 Jan 2016 17:56:43 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/01/07/%E8%BD%ACsql-%E4%B8%AD%E5%90%84%E7%A7%8Djoin/</guid>
      <description>一图胜千言 来源 stackoverflow.com</description>
    </item>
    
    <item>
      <title>MySQL获取分组后每组最大的数据</title>
      <link>https://emacsist.github.io/2016/01/07/mysql%E8%8E%B7%E5%8F%96%E5%88%86%E7%BB%84%E5%90%8E%E6%AF%8F%E7%BB%84%E6%9C%80%E5%A4%A7%E7%9A%84%E6%95%B0%E6%8D%AE/</link>
      <pubDate>Thu, 07 Jan 2016 16:51:36 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/01/07/mysql%E8%8E%B7%E5%8F%96%E5%88%86%E7%BB%84%E5%90%8E%E6%AF%8F%E7%BB%84%E6%9C%80%E5%A4%A7%E7%9A%84%E6%95%B0%E6%8D%AE/</guid>
      <description>需求 获取分组后每组数据中，ID最大的数据 表数据 table: hhh id name 1 hello 2 hello1 3 hello2 4 hello 5 hello2 6 hello3 7 hello1 想要的结果 id name 4 hello 5 hello2 6 hello3 7 hello1 SQL 实现1 select * from hhh where id in ( SELECT substring_index(group_concat(id</description>
    </item>
    
    <item>
      <title>SQL 以另一张表的值来设置某表的值</title>
      <link>https://emacsist.github.io/2016/01/07/sql-%E4%BB%A5%E5%8F%A6%E4%B8%80%E5%BC%A0%E8%A1%A8%E7%9A%84%E5%80%BC%E6%9D%A5%E8%AE%BE%E7%BD%AE%E6%9F%90%E8%A1%A8%E7%9A%84%E5%80%BC/</link>
      <pubDate>Thu, 07 Jan 2016 15:36:47 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2016/01/07/sql-%E4%BB%A5%E5%8F%A6%E4%B8%80%E5%BC%A0%E8%A1%A8%E7%9A%84%E5%80%BC%E6%9D%A5%E8%AE%BE%E7%BD%AE%E6%9F%90%E8%A1%A8%E7%9A%84%E5%80%BC/</guid>
      <description>需求 表1 table: h1 id name 1 hello1 2 hello2 3 hello11 4 hello22 表2 table: h2 h1_id name 1 2 1 3 3 2 4 想要的结果 h1_id name 1 hello1 2 hello2 1 hello1 3 hello11 3 hello11 2 hello2 4 hello22 SQL MySQL UPDATE h2 INNER JOIN h1 on h1.id = h2.h1_id set h2.name = h1.name; PostgreSQL update h2 set name</description>
    </item>
    
    <item>
      <title>PostgreSQL Rank()窗口函数和Row_number()窗口函数的区别</title>
      <link>https://emacsist.github.io/2015/12/25/postgresql-rank%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0%E5%92%8Crow_number%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Fri, 25 Dec 2015 14:17:33 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/12/25/postgresql-rank%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0%E5%92%8Crow_number%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>创建测试表和数据 postgres=# create table test(n int); CREATE TABLE postgres=# insert into test(n) values (1); INSERT 0 1 postgres=# insert into test(n) values (1); INSERT 0 1 postgres=# insert into test(n) values (2); INSERT 0 1 postgres=# insert into test(n) values (3); INSERT 0 1 postgres=# insert into test(n) values (4); INSERT 0 1 postgres=# insert into test(n) values (5); INSERT 0 1 postgres=#</description>
    </item>
    
    <item>
      <title>MySQL与PostgreSQL的 SELECT FOR UPDATE</title>
      <link>https://emacsist.github.io/2015/12/24/mysql%E4%B8%8Epostgresql%E7%9A%84-select-for-update/</link>
      <pubDate>Thu, 24 Dec 2015 17:04:34 +0000</pubDate>
      
      <guid>https://emacsist.github.io/2015/12/24/mysql%E4%B8%8Epostgresql%E7%9A%84-select-for-update/</guid>
      <description>MySQL的行级锁 MySQL 版本: mysql&amp;gt; select version(); +------------+ | version() | +------------+ | 5.6.17-log | +------------+ 1 row in set (0.00 sec) mysql&amp;gt; 创建测试表 CREATE TABLE `shortlink` ( `id` bigint(20) NOT NULL AUTO_INCREMENT , `long_url` varchar(6000) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL , `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP , `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP</description>
    </item>
    
  </channel>
</rss>